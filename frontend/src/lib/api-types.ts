/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with API information.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Stats
         * @description Get real-time dashboard statistics via database aggregation.
         */
        get: operations["get_dashboard_stats_api_dashboard_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Bets
         * @description Get recent bets.
         */
        get: operations["get_bets_api_bets_get"];
        put?: never;
        /**
         * Create Bet
         * @description Create a new bet.
         */
        post: operations["create_bet_api_bets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bets/{bet_id}/settle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Settle Bet
         * @description Settle a pending bet.
         */
        put: operations["settle_bet_api_bets__bet_id__settle_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/predictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Predictions
         * @description Get AI-generated ML predictions.
         */
        get: operations["get_predictions_api_predictions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/betai/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query Betai
         * @description Proxy query to LM Studio AI.
         */
        post: operations["query_betai_api_betai_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BetAIQuery */
        BetAIQuery: {
            /** Message */
            message: string;
        };
        /** BetCreate */
        BetCreate: {
            /** Matchup */
            matchup: string;
            /** Bet Type */
            bet_type: string;
            /** Stake */
            stake: number;
            /** Odds */
            odds: number;
        };
        /** BetResponse */
        BetResponse: {
            /** Bet Id */
            bet_id: number;
            /** Matchup */
            matchup: string;
            /** Bet Type */
            bet_type: string;
            /** Stake */
            stake: number;
            /** Odds */
            odds: number;
            /** Status */
            status: string;
            /** Profit Loss */
            profit_loss: number;
            /** Bet Date */
            bet_date: string;
            /** Created At */
            created_at: string;
            /** Updated At */
            updated_at: string;
        };
        /** BetSettle */
        BetSettle: {
            /** Result */
            result: string;
        };
        /** DashboardStats */
        DashboardStats: {
            /** Current Balance */
            current_balance: number;
            /** Total Profit Loss */
            total_profit_loss: number;
            /** Roi */
            roi: number;
            /** Win Rate */
            win_rate: number;
            /** Total Bets */
            total_bets: number;
            /** Pending Bets */
            pending_bets: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PredictionResponse */
        PredictionResponse: {
            /** Prediction Id */
            prediction_id: number;
            /** Matchup */
            matchup: string;
            /** Sport */
            sport: string;
            /** League */
            league: string;
            /** Game Date */
            game_date: string;
            /** Team A */
            team_a: string;
            /** Team B */
            team_b: string;
            /** Predicted Pick */
            predicted_pick: string;
            /** Predicted Odds */
            predicted_odds: number;
            /** Confidence Score */
            confidence_score: number;
            /** Projected Score */
            projected_score: string | null;
            /** Calculated Edge */
            calculated_edge: number | null;
            /** Created At */
            created_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_dashboard_stats_api_dashboard_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardStats"];
                };
            };
        };
    };
    get_bets_api_bets_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BetResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_bet_api_bets_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BetCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    settle_bet_api_bets__bet_id__settle_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bet_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BetSettle"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_predictions_api_predictions_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PredictionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    query_betai_api_betai_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BetAIQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
